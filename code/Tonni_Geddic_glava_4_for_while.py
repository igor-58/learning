#!/usr/bi/env python3
# -*- coding: utf-8 -*-
#pasw = 'y'
#while pasw == 'y' or pasw == 'Y':
    #num1 = int(input('Bведите первое число:  '))
    #num2 = int(input('Bведите второе число:  '))
    #print(f'Сумма первого и второго числа = {num1 + num2}')
    #pasw = input('Хотите продолжить? введите y или Y: ')
    
#for x in range(0, 1001, 10):
    #print(x, end=' ')
#pasw = 'y'
#MAX = 10
#total = 0
#while pasw == 'y' or pasw == 'Y':
    #for count in range(MAX):
        #num = int(input('Bведите число:  '))
        #total += num
    #print(f'Сумма введенных чисел = {total}')
    #pasw = input('Хотите продолжить? введите y или Y: ')
#chisl = 1
#total = 0
#for znam in range(30, 0, -1):
    #total += chisl/znam
    #chisl += 1
#print(f'Сумма числового ряда = {total:.2f}')

#for row in range(10):
    #for column in range(15):
        #print('#', end=' ')
    #print()
#**********************************************************************************************************
#**********************************************************************************************************
# Задание 1. Сборщик ошибок.
# Сборщик ошибок собирает ошибки каждый день в течение пяти дней. 
# Напишите программу, которая ведет учет нарастающего итога ошибок, собранных в те­чение пяти дней. 
# Цикл должен запрашивать количество ошибок, собираемых в течение каждого дня, 
# и когда цикл завершается, программа должна вывести общее количество собранных ошибок. 
#print('*'*70)
#MAX_DAY = 5
#total = 0
#day = 1
#for _ in range(MAX_DAY):
    #number = int(input(f'Введите количество ошибок, собираемых в течение {day} дня: '))
    #day += 1
    #total += number
#print(f'Количество ошибок за {MAX_DAY} дней составляет {total}.')
#print('*'*70)

# Задание 2. Сожженные калории. 
# Бег на беговой дорожке позволяет сжигать 4,2 калорий в минуту. 
# Напишите программу, которая применяет цикл для вывода количества калорий, сожжен­ных 
# после 10,  15, 20, 25 и 30 минут бега. 
#print('*'*70)
#kal = 4.2
#for x in range(10, 31, 5):
    #print(f'Количество соженных после {x} минут бега составляет {x*kal:.2f}')    
#

# Задание 3. Пройденное расстояние.  
# Пройденное транспортным средством расстояние можно вы­числить следующим образом: 
# расстояние = скорость х время. 
# Например, если поезд движется со скоростью 90 км/ч в течение трех часов, то пройден­
# ное расстояние составит 270 км. Напишите программу, которая запрашивает у пользова­
# теля скорость транспортного средства (в км/ч) и количество часов, которое оно двига­лось. 
# Затем она должна применить цикл для вывода расстояния, пройденного транспорт­ным средством  
# для  каждого  часа  этого  периода  времени.
#print('*'*70)
#speed = int(input('Введите скорость транспортного средства в (км/ч): '))
#time = int(input('Введите количество часов, которое оно двигалось: '))
#print('Час\tПройденное расстояние')
#print('-'*32)
#for x in range(1, time+1):
    #print(f'{x}\t{speed*x:3}')
    
#print('*'*70)

# Задание 4.Средняя толщина дождевых осадков. 
# Напишите программу, которая применяет 
# вло­женные циклы для сбора данных и вычисления средней толщины дождевых осадков за ряд лет. 
# Программа должна сначала запросить количество лет. Внешний цикл будет вы­полнять одну итерацию для 
# каждого года. Внутренний цикл будет делать двенадцать итераций, одну для каждого месяца. 
# Каждая итерация внутреннего цикла запрашивает у пользователя миллиметры дождевых осадков в течение 
# этого месяца. 
# После всех итера­ций программа должна вывести количество месяцев, 
# общее количество миллиметров до­ждевых осадков и среднюю толщину дождевых осадков в месяц в течение 
# всего периода. 

#print('*'*70)
#years = int(input('Введите количество лет: '))
#osadki = 0
#for year in range(1, years+1):
    #print(f'\nДанные за {year} год.')
    #print('-'*100)
    #for month in range(1, 13):
        #mm_osadki = int(input(f'Введте миллиметры дождевых осадков в течение {month:2} месяца: '))
        #osadki += mm_osadki 
#print('_'*100)
#print(f'Общее количесто месяцев {years*month}')
#print(f'Общее количество миллиметров до­ждевых осадков {osadki}')
#print(f'Средняя толщина дождевых осадков в месяц в течение всего периода. {osadki/(years*month):.2f}')
#print('*'*70)

# Задание 5. Таблица соответствия между градусами Цельсия и градусами Фаренгейта. 
# Напиши­те программу, которая выводит таблицу температур по шкале Цельсия от 0 до 20  и их 
# эквиваленты по Фаренгейту. Для вывода этой таблицы ваша программа должна применить цикл. 
#print('*'*70)
#print('Таблица температур')
#print('Цельсий\t\tФаренгейт')
#print('-'*30)
#far = 0
#for cels in range(0, 21):
    #far = (9/5)*cels + 32
    #print(f'{cels:2}\t\t{far:.1f}')
#print('*'*70)

# Задание 6. Мелкая монета для зарплаты. 
# Напишите программу, которая вычисляет сумму денег, которую человек заработает в течение 
# периода времени, если в первый день его зарплата составит одну копейку, во второй день две копейки 
# и каждый последующий день будет удваиваться.  
# Программа должна запросить у пользователя количество дней, вывести таблицу, показывающую 
# зарплату за каждый день, и затем показать заработную плату до налоговых и прочих удержаний 
# в конце периода. Итоговый результат должен быть выве­ден в рублях, а не в количестве копеек.

#print('*'*70)
#days = int(input('Введите количество дней: '))
#zarplata = 0
#print('Дни\tЗарплата')
#print('-'*20)
#for day in range(1, days+1):
    #if day == 1:
        #zarplata += 1
    #else:
        #zarplata *= 2
#print(f'{day}\t{zarplata}')
#print('*'*70)

# Задание 7. Сумма чисел. 
#Напишите программу с циклом, которая просит пользователя ввести ряд 
#положительных чисел.  Пользователь должен ввести  отрицательное число в  качестве 
#сигнала конца числового ряда. После того как все положительные числа будут введены, 
#программа должна вывести их сумму. 
#print('*'*70)
#summ = 0
#while True:
    #number = int(input('Введите положительнoe число: '))
    #if number == 0:
        #continue
    #if number > 0:
        #summ += number
    #else:
        #break
#print(f'Сумма введенных чисел = {summ}')
#print('*'*70)


# Задание 8. Уровень океана. 
# Допустим, что уровень океана в настоящее время повышается пример­но на 1,6  мм в год. 
# С учетом этого создайте приложение, которое выводит количество 
# миллиметров, на которые океан будет подниматься каждый год в течение следующих 25 лет.

#print('*'*70)
#years = 25
#count = 0
#print('Год\tПодъем в мм')
#print('-'*20)
#for year in range(1, years+1):
    #count = year*1.6
    #print(f'{year}\t{count:8.1f}')
#print('*'*70)

# Задание 9. Вычисление факториала числа.  
# Напишите программу, которая позволяет пользователю ввести неотрицательное целое 
# число и затем применяет цикл для вычисления факториала этого числа и показывает 
# факториал.

#print('*'*70)
#num = int(input('Введите положительнoe число: '))
#f = 1
#for x in range(1, num+1):
    #f *= x
#print(f'Факториал {num}! = {f}')
#print('*'*70)


# Напишите программу, которая предсказывает приблизительный размер по­пуляции организмов. 
# Приложение должно использовать текстовые поля, чтобы дать пользователю  ввести  стартовое  
# количество  организмов,  среднесуточное увеличение популяции (как процент) и количество дней, 
# которые организмам будет дано на размно­жение. 
# Например, допустим, что пользователь вводит приведенные ниже значения: 
# •  стартовое количество: 2; 
# •  среднесуточное увеличение: 30%; 
# •  количество дней для размножения: 10.

#print('*'*70)
#start_col = int(input('Введите стартовое количество: '))
#yvelichenie = int(input('Введите среднесуточное увеличение в %: '))
#days = int(input('Введите количество дней для размножения: '))
#print('День\tПопуляция')
#print('-'*20)
#for day in range(1, days+1):
    #if day == 1:
        #start_col = start_col
    #else:
        #start_col += start_col*(yvelichenie/100)
    #print(f'{day}\t{start_col:6.3f}')
#print('*'*70)

# Задание 10. Рисование.
# Напишите программу, которая применяет вложенные циклы для рисования этого узора: 
#******* 
#****** 
#***** 
#**** 
#*** 
#** 
#* 
print('*'*70)
for row in range(7,1,-1):
    for column in range(row):
        print('*', end='')
    print()
for row in range(7):
    for column in range(row+1):
        print('*', end='')
    print()
print('*'*70)

for row in range(7):
    for column in range(row):
        print(' ', end='')
    print('#')
for row in range(7, 0, -1):
    for column in range(row):
        print(' ', end='')
    print('#')    

#print('*'*70) 
#for row in range(6):
    #print('#')
    #for column in range(row):
        #print(' ', end='')
    #print('#')

print('END')
