#!usr/bin/env python3
# -*- coding: utf-8 -*-
#import matplotlib.pyplot as plt
#х_coords = [0, 1, 2, 3, 4] 
#y_coords = [0, 3, 1, 5, 2]
#plt.plot(х_coords, y_coords)
#plt.title('ГРАФИК')
#plt.xlabel('ось х')
#plt.ylabel('ось у')
#plt.grid(True)
#plt.show()

#names = ['Эйнштейн', 'Ньютон', 'Коперник', 'Кеплер']
#for val in names:
    #print(val, end=' ')
#print()    
#nambers_1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,12, 13, 13, 14, 23, 555, 666]
#nambers_2 = [] + nambers_1

#num = int(input('Введите количество чисел последовательности: '))
#def get_list(namber):
    #my_list = []
    #for item in range(1, num+1):
        #if item not in my_list:
            #my_list.append(item)
    #return my_list
#def get_sum(my_list):
    #res = 0
    #for v in my_list:
        #res += v
    #return res
#print(f'Последовательность => {get_list(num)}')
#print(f'Сумма всех чисел в последовательности = {get_sum(get_list(num))}.')
# ###############################################################################################
#                                ЗАДАЧИ ПО ПРГРАММИРОВАНИЮ
# Задание №1. Общий объем продаж. Разработайте программу, которая просит пользователя ввести 
# продажи магазина за каждый день недели. Суммы должны быть сохранены в списке. 
# Примените цикл, чтобы вычислить общий объем продаж за неделю и показать результат. 
#print('*'*50)
#day_week = ['Понедельник','Вторник','Среда','Четверг','Пятница','Суббота','Воскресенье']
#def get_sum_pay(day_list):
    #total = 0
    #for day in day_week:
        #res = float(input(f'Введите продажи магазина за {day}: '))
        #total += res
    #return total       
#print(f'Общий объем продож за неделю = {get_sum_pay(day_week):7.2f} рублей.')
#print('*'*50)

# ##############################################################################################

# Задание №2. Генератор лотерейных чисел. Разработайте программу, которая генерирует 
# семизнач­ную комбинацию лотерейных чисел. Программа должна сгенерировать семь случайных 
# чисел, каждое в диапазоне от О до 9,  и присвоить каждое число элементу списка.
# Затем напишите еще один цикл, который пока­зывает содержимое списка. 
#print('*'*50)
#import random
#my_list = []
#for i in range(0, 7):
    #num = random.randint(0, 10)
    #my_list.append(num)
#print(my_list, end=' ')
#print()
#print('*'*50)
# ###################################################################################################################
# Задание №3.Статистика дождевых осадков. Разработайте программу, которая позволяет 
# пользова­телю занести в список общее количество дождевых осадков за каждый 
# из 12 месяцев. 
# Программа должна вычислить и показать суммарное количество дождевых осадков за 
# год, среднее ежемесячное количество дождевых осадков и месяцы с самым высоким и 
# самым низким количеством дождевых осадков. 
#print('*'*50)
#mounth_year = ['Январь','Февраль','Март','Апрель','Май','Июнь','Июль',
               #'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь']
#os_list = []
#def get_osadki(info_list):
    #for mn in range(len(info_list)):
        #os_mounth = float(input(f'Введите количество осадков за {info_list[mn]} в мм.рт.ст.: '))
        #res = os_list.append(os_mounth)
    #return res
#get_osadki(mounth_year)
#count = 0
#total = 0
#for num in os_list:
    #count += 1
    #total += num
    #avervage = total/count    
#print(f'\nОбщее количество осадков за год = {total:.2f} мм.рт.ст.')
#print(f'Среднее ежемесячное количество дождевых осадков = {avervage:.2f} мм.рт.ст.')
#min_os = min(os_list)
#max_os = max(os_list)
##print(f'Максимальное количество осадков {max_os:.2f} мм.рт.ст.')
#for m in os_list:
    ##print(m, end=' ')
    #if m == min_os:
        #print(f'\nМинимальное количество осадков {min_os:.2f} мм.рт.ст.')
    #elif m == max_os:
        #print(f'Максимальное количество осадков {max_os:.2f} мм.рт.ст.')
#print('*'*50)

##############################################################################################################################
# Задание №4. Проrрамма анализа чисел. Разработайте программу, которая просит пользователя вве­сти 
# ряд из 20  чисел. Программа должна сохранить числа в списке и затем показать при­веденные ниже данные: 
# •  наименьшее число в списке; 
# •  наибольшее число в списке; 
# •  сумму чисел в списке; 
# •  среднее арифметическое значение чисел в списке. 
#print('*'*50)
#numbers = []
#def get_list_numbers(my_list):
    #for num in range(1, 21):
        #number = int(input(f'Введиете {num} число: '))
        #numbers.append(number)
    #return numbers
#get_list_numbers(numbers)
#print(f'наименьшее число в списке => {min(numbers)}') 
#print(f'наибольшее  число в списке => {max(numbers)}')
#print(f'сумму чисел в списке => {sum(numbers)}')
#print(f'среднее арифметическое значение чисел в списке => {sum(numbers)/len(numbers)}')
#print('*'*50)
# ############################################################################################################################
# Задание №5.  Проверка допустимости номера расходноrо счета. Среди исходного кода глав, 
#а также в подпапке data "Решений задач по программированию" соответствующей главы 
#вы найдете файл charge_accounts.txt.  Этот файл содержит список допустимых номеров 
#расходных счетов компании. Каждый номер счета представляет собой семизначное чис­
#ло, в частности 5658845. 
#Напишите программу, которая считывает содержимое файла в список. Затем эта про­
#грамма должна попросить  пользователя  ввести  номер расходного  счета.  Программа 
#должна определить, что номер является допустимым, путем его поиска в списке. Если 
#число в списке имеется, то программа должна вывести сообщение, указывающее на то, 
#что номер допустимый. Если числа в списке нет, то программа должна вывести сообще­
#ние, указывающее на то, что номер недопустимый. 
#print('*'*50)
#chet = []
#num_file = open(r'D:\RPy222\charge_accounts.txt', 'r', encoding='UTF8')
#for num in num_file:
    #num = int(num.rstrip('\n'))
    #chet.append(num)
#num_file.close()
#passw = int(input('Введите номер счета: '))
#if passw in chet:
    #print('Вы ввели корректный номер счета.')
#else:
    #print('Вы ввели не допустимый номер счета.')
#print('*'*50)

# ###########################################################################################################################
# Задание №6.   Больше числа n. В программе напишите функцию, которая принимает два аргумента: 
# список и число n. Допустим, что список содержит числа. Функция должна показать все 
# числа в списке, которые больше n. 
#print('*'*50)
#list_num = [1,2,3,4,5,6,7,8,9,10]
#n = 5
#def get_num(my_list, num):
    #for i in my_list:
        #if i > n:
            #print(i, end=' ')
#get_num(list_num, n)
#print()
#print('*'*50)
# ############################################################################################################################
# Задание №7.  Экзамен на получение водительских прав. Местный отдел по выдаче удостоверений на 
# право вождения автомобиля попросил вас создать приложение, которое оценивает пись­менную часть экзамена
# на получение водительских прав. Экзамен состоит из 20 вопросов 
# с множественным выбором. Вот правильные ответы: 
#  1.А  6.B  11.А  16.С 
#  2.C  7.C  12.D  17.B 
#  3.А  8.А  13.C  18.B 
#  4.А  9.С  14.А  19.D 
#  5.D 10.В  15.D  20.А 
# Ваша программа должна сохранить эти правильные ответы в списке. Программа должна 
# прочитать из текстового файла ответы испытуемого на каждый из 20 вопросов и сохра­нить эти ответы 
# в еще одном списке. (Создайте собственный текстовый файл для тести­рования приложения или же воспользуйтесь 
# файлом student_solution.txt.
# После того как ответы испытуемого были считаны из файла, программа должна вывести сообщение о том, 
# прошел ли испытуемый экзамен или нет. (Для того чтобы сдать экзамен, испытуемый должен правильно ответить на 15 
# из 20 вопросов.) Затем программа должна вывести общее количество вопросов, ответы 
# на которые были правильными, общее количество вопросов, ответы на которые были 
# неправильными, и список, показывающий номера вопросов, ответы на которые были не­
# правильными. 
print('*'*50)
good_answ = ['A', 'C', 'A', 'A', 'D',
             'B', 'C', 'A', 'C', 'B',
             'A', 'D', 'C', 'A', 'D',
             'C', 'B', 'B', 'D', 'A']
answ = []
answ_1 = []
answ_file = open(r'D:\RPy222\student_solution.txt', 'r', encoding='UTF8')
for char in answ_file:
    char = char.upper().rstrip('\n')
    answ.append(char)
answ_file.close()
print(good_answ)
print(answ)
def get_cor_answ(list_answ):
    count_correct = 0
    count_not_correct = 0
    for i, j in zip(good_answ, answ):
        if i == j:
            count_correct += 1
    return count_correct
def get_not_cor_answ(list_answ):
    count_not_correct = 0
    for i, j in zip(good_answ, answ):
        if i != j:
            count_not_correct += 1
    return count_not_correct
def res_att(number):
    if number >= 15:
        print('Поздравляем, вы удачно сдали экзамен !!!')
    else:
        print('Вы провалили экзамен.')
def get_index_not_cor_answ(list_answ):
    for i, j in zip(good_answ, answ):
        if i == j:
            continue 
        else:    
            answ_1.append(j)
    return answ_1
good = get_cor_answ(answ)
not_good = get_not_cor_answ(answ)
res_att(good)
print(get_index_not_cor_answ(answ))
print(f'Количество правильных ответов = {good}.')
print(f'Количество не правильных ответов = {not_good}')  
print('*'*50)
# ############################################################################################################################
print('END')
